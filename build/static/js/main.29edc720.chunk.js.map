{"version":3,"sources":["components/NetworkInfoForm.js","components/Notifications.js","components/App.js","index.js"],"names":["getSchema","availableNetworks","type","properties","ssid","title","default","oneOf","map","network","const","identity","passphrase","required","NetworkInfoForm","networks","selectedNetworkSsid","isEnterprise","onSubmit","React","data","setData","isSelectedNetworkEnterprise","some","security","Flex","flexDirection","alignItems","justifyContent","m","mt","Heading","h3","align","mb","Form","width","onFormChange","formData","onFormSubmit","value","schema","uiSchema","emphasized","undefined","submitButtonProps","mx","disabled","length","submitButtonText","Notifications","hasAvailableNetworks","attemptedConnect","error","Alert","info","Txt","span","style","textAlign","GlobalStyle","createGlobalStyle","App","useState","setAttemptedConnect","isFetchingNetworks","setIsFetchingNetworks","setError","setAvailableNetworks","useEffect","fetch","then","status","Error","statusText","json","catch","e","finally","Provider","Container","console","log","JSON","stringify","method","body","headers","resp","message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29edc720.chunk.js","sourcesContent":["import { JSONSchema7 as JSONSchema } from 'json-schema';\r\nimport * as React from 'react';\r\nimport { Flex, Form, Heading, RenditionUiSchema } from 'rendition';\r\nimport { Network, NetworkInfo } from './App';\r\n\r\nconst getSchema = (availableNetworks) => ({\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tssid: {\r\n\t\t\ttitle: 'שם הרשת הביתית',\r\n\t\t\ttype: 'string',\r\n\t\t\tdefault: availableNetworks[0]?.ssid,\r\n\t\t\toneOf: availableNetworks.map((network) => ({\r\n\t\t\t\tconst: network.ssid,\r\n\t\t\t\ttitle: network.ssid,\r\n\t\t\t})),\r\n\t\t},\r\n\t\tidentity: {\r\n\t\t\ttitle: 'User',\r\n\t\t\ttype: 'string',\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tpassphrase: {\r\n\t\t\ttitle: 'סיסמה לרשת הביתית',\r\n\t\t\ttype: 'string',\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t},\r\n\trequired: ['ssid'],\r\n});\r\n\r\nconst getUiSchema = (isEnterprise) => ({\r\n\tssid: {\r\n\t\t'ui:placeholder': 'בחר רשת',\r\n\t\t'ui:options': {\r\n\t\t\temphasized: true,\r\n\t\t},\r\n\t},\r\n\tidentity: {\r\n\t\t'ui:options': {\r\n\t\t\temphasized: true,\r\n\t\t},\r\n\t\t'ui:widget': !isEnterprise ? 'hidden' : undefined,\r\n\t},\r\n\tpassphrase: {\r\n\t\t'ui:widget': 'password',\r\n\t\t'ui:options': {\r\n\t\t\temphasized: true,\r\n\t\t},\r\n\t},\r\n});\r\n\r\nconst isEnterpriseNetwork = (\r\n\tnetworks,\r\n\tselectedNetworkSsid,\r\n) => {\r\n\treturn networks.some(\r\n\t\t(network) =>\r\n\t\t\tnetwork.ssid === selectedNetworkSsid && network.security === 'enterprise',\r\n\t);\r\n};\r\n\r\n\r\nexport const NetworkInfoForm = ({\r\n\tavailableNetworks,\r\n\tonSubmit,\r\n}) => {\r\n\tconst [data, setData] = React.useState({});\r\n\r\n\tconst isSelectedNetworkEnterprise = isEnterpriseNetwork(\r\n\t\tavailableNetworks,\r\n\t\tdata.ssid,\r\n\t);\r\n\r\n\treturn (\r\n\t\t<Flex\r\n\t\t\tflexDirection=\"column\"\r\n\t\t\talignItems=\"center\"\r\n\t\t\tjustifyContent=\"center\"\r\n\t\t\tm={4}\r\n\t\t\tmt={5}\r\n\t\t>\r\n\t\t\t<Heading.h3 align=\"center\" mb={4}>\r\n\t\t\t\tאנא בחר את הרשת הביתית שלך מתוך הרשימה והכנס את הסיסמה אליה\r\n\t\t\t</Heading.h3>\r\n\r\n\t\t\t<Form\r\n\t\t\t\twidth={['100%', '80%', '60%', '40%']}\r\n\t\t\t\tonFormChange={({ formData }) => {\r\n\t\t\t\t\tsetData(formData);\r\n\t\t\t\t}}\r\n\t\t\t\tonFormSubmit={({ formData }) => onSubmit(formData)}\r\n\t\t\t\tvalue={data}\r\n\t\t\t\tschema={getSchema(availableNetworks)}\r\n\t\t\t\tuiSchema={getUiSchema(isSelectedNetworkEnterprise)}\r\n\t\t\t\tsubmitButtonProps={{\r\n\t\t\t\t\twidth: '60%',\r\n\t\t\t\t\tmx: '20%',\r\n\t\t\t\t\tmt: 3,\r\n\t\t\t\t\tdisabled: availableNetworks.length <= 0,\r\n\t\t\t\t}}\r\n\t\t\t\tsubmitButtonText={'התחבר'}\r\n\t\t\t/>\r\n\t\t</Flex>\r\n\t);\r\n};\r\n","import * as React from 'react';\r\nimport { Txt, Alert } from 'rendition';\r\n\r\nexport const Notifications = ({\r\n\thasAvailableNetworks,\r\n\tattemptedConnect,\r\n\terror,\r\n}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{attemptedConnect && (\r\n\t\t\t\t<Alert m={2} info>\r\n\t\t\t\t\t<Txt.span>מנסה להתחבר</Txt.span>\r\n\t\t\t\t\t<Txt.span>\r\n\t\t\t\t\t\tהמכשיר שלך בקרוב יהיה מוכן לפעולה, אם החיבור אינו מוצלח הרשת תישאר דלוקה ועליך לנסו להתחבר אליה מחדש\r\n\t\t\t\t\t</Txt.span>\r\n\t\t\t\t</Alert>\r\n\t\t\t)}\r\n\t\t\t{!hasAvailableNetworks && (\r\n\t\t\t\t<Alert m={2} style={{textAlign:\"right\"}}>\r\n\t\t\t\t\t<Txt.span> אזהרה! לא נמצאו רשתות אנא וודא שהמכשיר נמצא בטווח הרשת הביתית</Txt.span>\r\n\r\n\t\t\t\t</Alert>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Navbar, Provider, Container } from 'rendition';\r\nimport { NetworkInfoForm } from './NetworkInfoForm';\r\nimport { Notifications } from './Notifications';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\tbody {\r\n\t\tmargin: 0;\r\n\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n\t\t\t'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n\t\t\tsans-serif;\r\n\t\t-webkit-font-smoothing: antialiased;\r\n\t\t-moz-osx-font-smoothing: grayscale;\r\n\t}\r\n\r\n\tcode {\r\n\t\tfont-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n\t}\r\n`;\r\n\r\n\r\n\r\nconst App = () => {\r\n\tconst [attemptedConnect, setAttemptedConnect] = React.useState(false);\r\n\tconst [isFetchingNetworks, setIsFetchingNetworks] = React.useState(true);\r\n\tconst [error, setError] = React.useState('');\r\n\tconst [availableNetworks, setAvailableNetworks] = React.useState(\r\n\t\t[],\r\n\t);\r\n\r\n\tReact.useEffect(() => {\r\n\t\tfetch('/networks')\r\n\t\t\t.then((data) => {\r\n\t\t\t\tif (data.status !== 200) {\r\n\t\t\t\t\tthrow new Error(data.statusText);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data.json();\r\n\t\t\t})\r\n\t\t\t.then(setAvailableNetworks)\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tsetError(`לא נמצאו רשתות`);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetIsFetchingNetworks(false);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tconst onConnect = (data) => {\r\n\t\tsetAttemptedConnect(true);\r\n\t\tsetError('');\r\n\t\tconsole.log(JSON.stringify(data))\r\n\t\tfetch('/connect', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify(data),\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t})\r\n\t\t\t.then((resp) => {\r\n\t\t\t\tif (resp.status !== 200) {\r\n\t\t\t\t\tthrow new Error(resp.statusText);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tsetError(`לא היה ניתן להחבר לרשת ${e.message || e}`);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Provider>\r\n\t\t\t<GlobalStyle />\r\n\r\n\t\t\t<Container>\r\n\t\t\t\t<Notifications\r\n\t\t\t\t\tattemptedConnect={attemptedConnect}\r\n\t\t\t\t\thasAvailableNetworks={\r\n\t\t\t\t\t\tisFetchingNetworks || availableNetworks.length > 0\r\n\t\t\t\t\t}\r\n\t\t\t\t\terror={error}\r\n\t\t\t\t/>\r\n\t\t\t\t<NetworkInfoForm\r\n\t\t\t\t\tavailableNetworks={availableNetworks}\r\n\t\t\t\t\tonSubmit={onConnect}\r\n\t\t\t\t/>\r\n\t\t\t</Container>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'whatwg-fetch';\r\nimport 'promise-polyfill/src/polyfill';\r\n\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}